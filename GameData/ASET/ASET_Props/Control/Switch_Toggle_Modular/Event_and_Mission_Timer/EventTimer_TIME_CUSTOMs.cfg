// TIMER =========================================================

// count UP

RPM_MATH_VARIABLE
{
   name = STS_EVENTTIMER_TIMERCOUNT_UP
   operator = SUBTRACT 

   sourceVariable = UTSECS
   sourceVariable = PERSISTENT_STS_EventTimer_TIMERSTARTTIME
} 

// count DOWN

RPM_MATH_VARIABLE
{
   name = STS_EVENTTIMER_TIMERCOUNT_DOWN
   operator = SUBTRACT 

   sourceVariable = PERSISTENT_STS_EVENTTIMER_INIT_TIME
   sourceVariable = MATH_STS_EVENTTIMER_TIMERCOUNT_UP
} 

// invert negative time

RPM_MATH_VARIABLE
{
   name = STS_EVENTTIMER_TIMERCOUNT_DOWN_INV
   operator = MULTIPLY 

   sourceVariable = MATH_STS_EVENTTIMER_TIMERCOUNT_DOWN
   sourceVariable = -1
} 

// time must always be positive

RPM_SELECT_VARIABLE
{
    name = STS_EVENTTIMER_TIMERCOUNT_DOWN_POSITIVE

    defaultValue = MATH_STS_EVENTTIMER_TIMERCOUNT_DOWN 
	
	VARIABLE_DEFINITION
    {
        name = MATH_STS_EVENTTIMER_TIMERCOUNT_DOWN
        range = -1000000000000000, 0.0000000001

        value = MATH_STS_EVENTTIMER_TIMERCOUNT_DOWN_INV
    }
}

// Displayed time

RPM_SELECT_VARIABLE
{
    name = STS_EVENTTIMER_TIME

    defaultValue = 0 
	
	//VARIABLE_DEFINITION
    //{
    //    name = PERSISTENT_STS_EventTimer_STORED_TIMER_TIME
    //    range = -1.1, -0.1
//
    //    value = 0
   // }
	
	VARIABLE_DEFINITION
    {
        name = CUSTOM_STS_EVENTTIMER_TESTMODE_ON
        range = 0.1, 1.1

        value = SELECT_STS_EVENTTIMER_TESTMODE_TEXT
    }
	
	VARIABLE_DEFINITION
    {
        name = CUSTOM_STS_EVENTTIMER_DISP_INITTIME
        range = 0.1, 1.1

        value = PERSISTENT_STS_EVENTTIMER_INIT_TIME
    }

	VARIABLE_DEFINITION
    {
        name = PERSISTENT_STS_EventTimer_TIMERSTATE
        range = 0.1, 1.1

        value = SELECT_STS_EVENTTIMER_SELECTED_COUNTMODE
    }
	
    VARIABLE_DEFINITION
    {
        name = PERSISTENT_STS_EventTimer_TIMERSTATE
        range = -0.1, 0.1

        value = PERSISTENT_STS_EventTimer_STORED_TIMER_TIME
    }
	
	//VARIABLE_DEFINITION
    //{
    //    name = PERSISTENT_STS_EventTimer_MODE
    //    range = -0.1, 0.1

    //    value = SELECT_STS_EVENTTIMER_TIMERCOUNT_DOWN_POSITIVE
    //}
}

// select Count UP or Count DOWN


RPM_SELECT_VARIABLE
{
    name = STS_EVENTTIMER_SELECTED_COUNTMODE

    defaultValue = 0 

	VARIABLE_DEFINITION
    {
        name = PERSISTENT_STS_EventTimer_MODE
        range = 0.1, 1.1

        value = SELECT_STS_EVENTTIMER_TIMERCOUNT_DOWN_POSITIVE
    }
	
    VARIABLE_DEFINITION
    {
        name = PERSISTENT_STS_EventTimer_MODE
        range = 1.1, 2.1

        value = MATH_STS_EVENTTIMER_TIMERCOUNT_UP
    }
}
	
// display initial time	
	
RPM_CUSTOM_VARIABLE

	{
	  name = STS_EVENTTIMER_DISP_INITTIME
	  operator = AND
	  
	  SOURCE_VARIABLE
      {
        name = PERSISTENT_STS_EventTimer_TIMERSTATE
        range = -0.1, 0.1
      }
	   
	  //SOURCE_VARIABLE
	  //{
	//	name = PERSISTENT_STS_EventTimer_SET_RESET_tggl_UP
    //    range = 0.1, 1.1
	//  }	
	  
	  SOURCE_VARIABLE
	  {
		name = CUSTOM_ALCOR_POWEROFF
		range = -0.1, 0.1
	  }
	  
	  SOURCE_VARIABLE
	  {
		name = PERSISTENT_STS_EventTimer_MODE
        range = 0.1, 1.1
	  }
	}	
	
// Test mode	
	
RPM_CUSTOM_VARIABLE

	{
	  name = STS_EVENTTIMER_TESTMODE_ON
	  operator = AND
	  
	  SOURCE_VARIABLE
	  {
		name = PERSISTENT_STS_EventTimer_SET_RESET_tggl_UP
        range = -0.1, 1.1
	  }	
	  
	  SOURCE_VARIABLE
	  {
		name = PERSISTENT_STS_EventTimer_TIMERSTATE
        range = -0.1, 0.1
	  }	
	  
	  SOURCE_VARIABLE
	  {
		name = CUSTOM_ALCOR_POWEROFF
		range = -0.1, 0.1
	  }
	  
	  SOURCE_VARIABLE
	  {
		name = PERSISTENT_STS_EventTimer_MODE
        range = -0.1, 0.1
	  }
	}
	
RPM_SELECT_VARIABLE

{
    name = STS_EVENTTIMER_TESTMODE_TEXT

    defaultValue = -1 

		  
	  VARIABLE_DEFINITION
	  {
		name = PERIOD_0.5HZ 
		range = 0.1, 1.1
	 
        value = 88:88
      }
}
